name: Generate missing WanNianLi years
on: workflow_dispatch

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 0 — checkout repo
    - uses: actions/checkout@v4

    # 1 — install Python libs (all in cloud)
    - name: Install Python deps
      run: |
        python -m pip install --upgrade pip
        pip install lunardate

    # 2 — generate GAP years JSON (1800-1899, 2101-2300)
    - name: Generate gap JSON
      run: |
        python <<'PY'
        import json, datetime, math, os, sys
        from lunardate import LunarDate

        # --- helpers ---------------------------------------------------------
        STEMS = "甲乙丙丁戊己庚辛壬癸"
        BRANCHES = "子丑寅卯辰巳午未申酉戌亥"

        def gz_year(year):
            return STEMS[(year - 4) % 10] + BRANCHES[(year - 4) % 12]

        #     Meeus JD (valid Gregorian 1583-9999)
        def greg_to_jd(y, m, d):
            if m <= 2:
                y -= 1
                m += 12
            A = y // 100
            B = 2 - A + A // 4
            return (math.floor(365.25 * (y + 4716))
                    + math.floor(30.6001 * (m + 1))
                    + d + B - 1524.5)

        JD_ANCHOR = greg_to_jd(1984, 2,  2)  # 甲子日

        def gz_day(y, m, d):
            idx = int((greg_to_jd(y, m, d) - JD_ANCHOR) % 60)
            return STEMS[idx % 10] + BRANCHES[idx % 12]

        out = []
        def push(year):
            start = datetime.date(year, 1, 1)
            end   = datetime.date(year, 12, 31)
            day   = datetime.timedelta(days=1)
            cur = start
            while cur <= end:
                g = cur.isoformat()                       # YYYY-MM-DD
                try:
                    ld = LunarDate.fromSolarDate(cur.year, cur.month, cur.day)
                    lunar_month = f"{'闰' if ld.isleap() else ''}{ld.month}"
                    out.append({
                        "gregorian_date": g,
                        "lunar_year_gz" : gz_year(ld.year),
                        "lunar_month"   : lunar_month,
                        "lunar_day"     : ld.day,
                        "day_ganzhi"    : gz_day(cur.year, cur.month, cur.day)
                    })
                except ValueError:
                    # lunardate only valid to 2050; shouldn't happen here,
                    # but leave guard for completeness.
                    pass
                cur += day

        for y in range(1800, 1900):  push(y)
        for y in range(2101, 2301):  push(y)

        os.makedirs("data/gen", exist_ok=True)
        with open("data/gen/gap.json", "w", encoding="utf8") as f:
            json.dump(out, f, ensure_ascii=False)
        print("Generated rows:", len(out))
        PY

    # 3 — convert HKO + CWA CSVs that are already in data/ to JSON
    - name: Convert official CSV → JSON
      run: |
        python <<'PY'
        import csv, json, os, pathlib, glob

        rows=[]
        # HKO yearly CSVs
        for fp in glob.glob("data/hko/*.csv"):
            with open(fp, newline='', encoding='utf8') as f:
                rows.extend(list(csv.DictReader(f)))
        # CWA master CSV
        if pathlib.Path("data/cwa/cwa.csv").exists():
            with open("data/cwa/cwa.csv", newline='', encoding='utf8') as f:
                rows.extend(list(csv.DictReader(f)))

        os.makedirs("data/gen", exist_ok=True)
        with open("data/gen/official.json","w",encoding="utf8") as f:
            json.dump(rows,f,ensure_ascii=False)
        print("Official rows:", len(rows))
        PY

    # 4 — merge GAP + OFFICIAL → master JSON (normalise fields)
    - name: Merge to 1800-2300 JSON
      run: |
        python <<'PY'
        import json, os, pathlib, itertools

        gap = json.load(open("data/gen/gap.json", encoding="utf8"))
        off = json.load(open("data/gen/official.json", encoding="utf8"))

        def norm(r):
            # unify field names; many CSV headers differ
            return {
              "g": r.get("gregorian_date") or r.get("公曆日期") or r.get("Gregorian") or r.get("日期"),
              "y": r.get("lunar_year_gz")  or r.get("農曆干支年") or r.get("干支年"),
              "m": r.get("lunar_month")    or r.get("農曆月")    or r.get("lunar_month"),
              "d": r.get("lunar_day")      or r.get("農曆日")    or r.get("lunar_day"),
              "dg": r.get("day_ganzhi")    or r.get("day_ganzhi") # may be missing in official CSV
            }

        merged={}
        for r in itertools.chain(gap, off):
            n = norm(r)
            if n["g"]:
                merged[n["g"]] = n          # official rows override gap

        out = list(sorted(merged.values(), key=lambda x: x["g"]))
        os.makedirs("data", exist_ok=True)
        with open("data/wanianli_1800_2300.json","w",encoding="utf8") as f:
            json.dump(out, f, ensure_ascii=False)
        print("Merged days:", len(out))
        PY

    # 5 — commit & push
    - name: Commit merged file
      run: |
        git config user.name  "gap-bot"
        git config user.email "bot@example.com"
        git add data/wanianli_1800_2300.json
        git commit -m "Add merged WanNianLi 1800-2300" || echo "No changes"
        git push origin HEAD

    # 6 — sanity check
    - name: List final artefact
      run: ls -lh data/wanianli_1800_2300.json
