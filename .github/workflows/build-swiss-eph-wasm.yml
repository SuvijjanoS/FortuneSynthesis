name: Build Swiss-Eph WASM Minimal
on: 
  workflow_dispatch:
  push:
    branches:
      - main
      
jobs:
  build-wasm:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup and build minimal Swiss Eph
        run: |
          # Create minimal Swiss Ephemeris implementation
          mkdir -p lib/swiss-ephem
          
          cat > lib/swiss-ephem/minimal-sweph.c << 'EOF'
          #include <math.h>
          #include <stdio.h>
          #include <stdlib.h>
          #include <string.h>
          
          #define SE_GREG_CAL 1
          
          // Minimal Julian Day calculation
          double swe_julday(int year, int month, int day, double hour, int gregflag) {
              int a, b;
              if (month <= 2) {
                  year--;
                  month += 12;
              }
              a = floor(year / 100.0);
              if (gregflag == SE_GREG_CAL) {
                  b = 2 - a + floor(a / 4.0);
              } else {
                  b = 0;
              }
              return floor(365.25 * (year + 4716)) + floor(30.6001 * (month + 1)) + day + b - 1524.5 + hour / 24.0;
          }
          
          // Minimal reverse Julian Day
          void swe_revjul(double jd, int gregflag, int *jyear, int *jmon, int *jday, double *jut) {
              double z, f, a, alpha, b, c, d, e;
              
              z = floor(jd + 0.5);
              f = (jd + 0.5) - z;
              
              if (gregflag == SE_GREG_CAL) {
                  alpha = floor((z - 1867216.25) / 36524.25);
                  a = z + 1 + alpha - floor(alpha / 4);
              } else {
                  a = z;
              }
              
              b = a + 1524;
              c = floor((b - 122.1) / 365.25);
              d = floor(365.25 * c);
              e = floor((b - d) / 30.6001);
              
              *jday = b - d - floor(30.6001 * e) + f;
              *jmon = (e < 14) ? e - 1 : e - 13;
              *jyear = (*jmon > 2) ? c - 4716 : c - 4715;
              *jut = f * 24.0;
          }
          
          // Placeholder for other functions
          int swe_calc_ut(double tjd_ut, int ipl, int iflag, double *xx, char *serr) {
              // Minimal implementation - just return success
              return 0;
          }
          
          void swe_set_ephe_path(char *path) {
              // No-op for minimal version
          }
          
          int swe_houses(double tjd_ut, int32_t iflag, double geolat, double geolon, int hsys, double *cusps, double *ascmc) {
              // Minimal implementation
              return 0;
          }
          
          void swe_close(void) {
              // No-op for minimal version
          }
          EOF

          # Install Emscripten
          git clone https://github.com/emscripten-core/emsdk.git
          cd emsdk
          ./emsdk install latest
          ./emsdk activate latest
          source ./emsdk_env.sh
          cd ..

          # Build minimal Swiss Ephemeris
          emcc -O3 \
               -s EXPORTED_FUNCTIONS='["_swe_julday","_swe_calc_ut","_swe_set_ephe_path","_swe_houses","_swe_revjul","_swe_close"]' \
               -s EXPORTED_RUNTIME_METHODS='["cwrap","ccall"]' \
               -s MODULARIZE=1 \
               -s EXPORT_NAME='createSwissEphModule' \
               lib/swiss-ephem/minimal-sweph.c \
               -o lib/swiss-ephem/swe_wasm.js

      - name: Create TypeScript definitions
        run: |
          cat > lib/swiss-ephem/index.d.ts << 'EOF'
          export interface SwissEphemeris {
            julday: (year: number, month: number, day: number, hour: number, gregflag: number) => number;
            calcUt: (tjd: number, ipl: number, iflag: number, xx: number[], serr: string) => number;
            setEphePath: (path: string) => void;
            houses: (tjd: number, iflag: number, lat: number, lon: number, hsys: number, cusps: number[], ascmc: number[]) => number;
            revjul: (jd: number, gregflag: number, year: number[], month: number[], day: number[], hour: number[]) => void;
            close: () => void;
          }
          
          export default function loadSwissEph(): Promise<SwissEphemeris>;
          EOF

      - name: Commit & push WASM files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          commit_message: "chore: add minimal Swiss-Eph WASM build"
          file_pattern: "lib/swiss-ephem/*"
